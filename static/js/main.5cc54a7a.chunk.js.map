{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","accounts","contract1","contract2","contract3","componentWillMount","eth","getAccounts","instance1","Contract","Staking","abi","instance2","ChainlinkETHprice","instance3","ReWarD","setState","runInit","alert","error","methods","getETHTVL","call","ETHTVL","getVaultBalance","ContractBalance","getStakedBalance","balance","getLatestPrice","price","getOldRewards","OldRewards","balanceOf","walletBalance","DEPOSIT","DamountWei","utils","toWei","Damount","value","deposit","send","from","WITHDRAW","WamountWei","Wamount","withdrawal","UPDATE","UpdateReward","CLAIM","ClaimRewards","WACR","WithdrawAllAndClaimRewards","this","className","style","display","justifyContent","Card","width","Header","Body","Form","Group","controlId","Control","type","id","ref","input","Button","onClick","variant","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5cc54a7a.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Staking from \"./contracts/Staking.json\";\nimport ReWarD from \"./contracts/ReWarD.json\";\nimport ChainlinkETHprice from \"./contracts/ChainlinkETHprice.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\"; \n\n\nclass App extends Component {\n  state = { web3: null, accounts: null, contract1: null, contract2: null, contract3: null }; \n\n  componentWillMount = async () => {\n    try {\n      // Récupérer le provider web3\n      const web3 = await getWeb3();\n  \n      // Utiliser web3 pour récupérer les comptes de l’utilisateur (MetaMask dans notre cas) \n      const accounts = await web3.eth.getAccounts();\n\n      // Récupérer l’instance du smart contract “Staking” avec web3 et les informations du déploiement du fichier (client/src/contracts/Staking.json)\n  \n        const instance1 = new web3.eth.Contract(\n        Staking.abi,\n        \"0xF230C7E192374C6a5421CD6286862d73472C8E0a\", \n      );\n        const instance2 = new web3.eth.Contract(\n        ChainlinkETHprice.abi,\n        \"0x57EF9887279a27F1a895918defC2a0443113ff93\", \n      );\n        const instance3 = new web3.eth.Contract(\n        ReWarD.abi,\n        \"0xF230C7E192374C6a5421CD6286862d73472C8E0a\", \n      );\n \n      this.setState({ web3, accounts, contract1: instance1, contract2: instance2, contract3: instance3 }, this.runInit);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Non-Ethereum browser detected. Can you please try to install MetaMask before starting.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runInit = async() => {\n    const { accounts, contract1, contract2, contract3 } = this.state;\n  \n    // récupérer la TVL\n    const ETHTVL = await contract1.methods.getETHTVL().call();\n\n    // récupérer le nombre d'ETH sur le contrat\n    const ContractBalance = await contract1.methods.getVaultBalance().call(); \n\n    // récupérer le montant déposé\n    const balance = await contract1.methods.getStakedBalance(accounts[0]).call()/1000000000000000000;\n \n\n    // récupérer le prix de l'ETH avec Chainlink\n    const price = await contract2.methods.getLatestPrice().call();\n\n    //récupérer le montant de récompenses acquis \n    const OldRewards= await contract1.methods.getOldRewards(accounts[0]).call()/1000000000000000000;\n\n    //récupérer la balance en jetons RWD du portefeuille\n    const walletBalance = await contract3.methods.balanceOf(accounts[0]).call()/1000000000000000000;\n\n    // Mettre à jour le state \n   this.setState({ETHTVL:ETHTVL, ContractBalance:ContractBalance, balance:balance, price:price, OldRewards:OldRewards, walletBalance:walletBalance });\n  }; \n\n\n\n  DEPOSIT = async() => {\n    const { accounts, contract1, web3 } = this.state;\n    const DamountWei = web3.utils.toWei(this.Damount.value, 'ether');   \n  await contract1.methods.deposit().send({from: accounts[0], value: DamountWei});\n  this.runInit();\n}\n  \n  WITHDRAW = async() => {\n    const { accounts, contract1, web3 } = this.state;\n    const WamountWei = web3.utils.toWei(this.Wamount.value, 'ether');  \n    await contract1.methods.withdrawal(WamountWei).send({from: accounts[0]});\n    this.runInit();\n  }\n\n  UPDATE = async() => {\n    const { accounts, contract1, web3 } = this.state;\n    await contract1.methods.UpdateReward().send({from: accounts[0]});\n    this.runInit();\n  }\n\n  CLAIM = async() => {\n    const { accounts, contract1, web3 } = this.state;\n    await contract1.methods.ClaimRewards().send({from: accounts[0]});\n    this.runInit();\n  }\n\n\n  WACR = async() => {\n    const { accounts, contract1, web3 } = this.state;\n    await contract1.methods.WithdrawAllAndClaimRewards().send({from: accounts[0]});\n    this.runInit();\n  }\n\n \n\n  render() {\n    const { ETHTVL, ContractBalance, balance, price, OldRewards, walletBalance} = this.state;\n   \n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    return (\n      <div className=\"App\">\n\n        <div>\n            <h2 className=\"text-center\">ETH Vault 19.6% APY </h2>\n            <hr></hr>\n            <br></br>\n        </div>\n\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong> ETH price : {price} $ </strong></Card.Header>\n            <Card.Header><strong>TVL : {ETHTVL/1000000000000000000} ETH </strong></Card.Header>\n            <Card.Header><strong>Contract Balance: {ContractBalance/1000000000000000000} ETH </strong></Card.Header>\n            <Card.Header><strong>Your staked balance: {balance} ETH </strong></Card.Header>\n            <Card.Header><strong>Your rewards stored on-chain: {OldRewards} RWD </strong></Card.Header>\n            <Card.Header><strong>In your wallet: {walletBalance} RWD </strong></Card.Header>     \n          </Card>\n        </div>\n\n        <br></br>\n\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n           <Card style={{ width: '50rem' }}>\n             <Card.Header><strong> I want to deposit: </strong></Card.Header>\n             <Card.Body>   \n                <Form.Group controlId=\"formAddress\">\n                <Form.Control type=\"text\" id=\"Damount\"\n                ref={(input) => { this.Damount = input }}\n                />\n                </Form.Group>    \n                <Button onClick={ this.DEPOSIT } variant=\"dark\" > DEPOSIT </Button>\n             </Card.Body>\n           </Card>\n        </div>\n\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong> I want to withdraw: </strong></Card.Header>\n            <Card.Body>\n                <Form.Group controlId=\"formAddress\">\n                <Form.Control type=\"text\" id=\"Wamount\"\n                ref={(input) => { this.Wamount = input }}\n                />\n                </Form.Group>\n                <Button onClick={ this.WITHDRAW } variant=\"dark\" > WITHDRAW </Button>     \n            </Card.Body>\n          </Card>\n        </div>\n\n        <br></br>\n    \n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong> Recalculing your rewards until now: </strong></Card.Header>\n            <Card.Body>\n                <Button onClick={ this.UPDATE } variant=\"dark\" > Update Rewards </Button>     \n            </Card.Body>\n          </Card>\n        </div>\n\n        <br></br>\n\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong> Sending rewards to your wallet: </strong></Card.Header>\n            <Card.Body>\n                <Button onClick={ this.CLAIM } variant=\"dark\" > Claim Rewards </Button>     \n            </Card.Body>\n          </Card>\n        </div>\n       \n        <br></br>\n\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong> Sending staked ETH + rewards to your wallet: </strong></Card.Header>\n            <Card.Body>\n                <Button onClick={ this.WACR } variant=\"dark\" > Withdraw All and Claim Rewards </Button>     \n            </Card.Body>\n          </Card>\n        </div>\n\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}